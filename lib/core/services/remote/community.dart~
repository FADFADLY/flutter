import 'dart:convert';

import 'package:graduationproject/features/comunity/data/models/all_blogs/full_blog_model.dart';
import 'package:http/http.dart' as http;

import '../../../config/cache/secure_cache_helper.dart';
import '../../../features/comunity/data/models/single_blog/full_single_blog_model.dart';
import '../../../features/comunity/domain/entity/all_blogs/full_blog_entity.dart';
import '../../errors/exceptions.dart';

class CommunityService {
  static const String _baseUrl = 'https://progruad.website/fadfadly/public/api';

  Future<FullBlogModel> getAllBlogs() async {
    Future<String?> _getToken() async {
      return await SecureCacheHelper.getString(key: "access_token");
    }
    try {
      final token = await _getToken();
      if (token == null) {
        throw GenericException(message: 'Token not found. Please log in again.');
      }

      final response = await http.get(
        Uri.parse('${_baseUrl}/blogs'),
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
      );

      if (response.statusCode == 200) {
        final responseData = jsonDecode(response.body);
        return FullBlogModel.fromJson(responseData);
      } else if (response.statusCode == 401) {
        throw ServerException(
          message: 'Unauthorized: Invalid or expired token.',
          statusCode: response.statusCode,
        );
      } else {
        throw ServerException(
          message: 'Failed to fetch blogs: ${response.statusCode}',
          statusCode: response.statusCode,
        );
      }
    }  catch (e , stackTrace) {
      print('Error in getSingleBlog: $e');
      print('Stack trace: $stackTrace');

      throw GenericException(message: 'Error fetching blogs: $e');
    }
  }
  Future<FullSingleBlogModel> getSingleBlog(int id) async {
    Future<String?> _getToken() async {
      return await SecureCacheHelper.getString(key: "access_token");
    }
    try {
      final token = await _getToken();
      if (token == null) {
        throw GenericException(message: 'Token not found. Please log in again.');
      }

      final response = await http.get(
        Uri.parse('${_baseUrl}/blogs/$id'),
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
      );

      if (response.statusCode == 200) {
        final responseData = jsonDecode(response.body);
        return FullSingleBlogModel.fromJson(responseData);
      } else if (response.statusCode == 401) {
        throw ServerException(
          message: 'Unauthorized: Invalid or expired token.',
          statusCode: response.statusCode,
        );
      } else {
        throw ServerException(
          message: 'Failed to fetch blogs: ${response.statusCode}',
          statusCode: response.statusCode,
        );
      }
    } catch (e , stackTrace) {
      print('Error in getSingleBlog: $e');
      print('Stack trace: $stackTrace');

      throw GenericException(message: 'Error fetching blogs: $e');
    }
  }
}